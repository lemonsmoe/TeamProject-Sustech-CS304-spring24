{"ast":null,"code":"import axios from 'axios';\nlet baseURL;\n\n// 检查是否存在非标准端口\nconst origin = window.location.origin;\nif (origin.includes(':')) {\n  // 包含非标准端口\n  baseURL = origin.replace(/(:\\d+)+$/, '') + ':5050';\n} else {\n  baseURL = origin + ':5050';\n}\nconsole.log('baseURL:', baseURL);\n// 创建可一个新的axios对象\nconst request = axios.create({\n  // baseURL: 'http://localhost:5050',   // 后端的接口地址  ip:port\n  baseURL: baseURL,\n  // 后端的接口地址  ip:port\n  timeout: 100000,\n  withCredentials: true // this will include cookies in requests\n});\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8';\n  // let user = localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : null\n  // config.headers['token'] = 'token'  // 设置请求头\n\n  return config;\n}, error => {\n  console.error('request error: ' + error); // for debug\n  return Promise.reject(error);\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(response => {\n  let res = response;\n  // res.status = response.status;\n\n  // 兼容服务端返回的字符串数据\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n  return res;\n}, error => {\n  console.error('response error: ' + error); // for debug\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","baseURL","origin","window","location","includes","replace","console","log","request","create","timeout","withCredentials","interceptors","use","config","headers","error","Promise","reject","response","res","JSON","parse"],"sources":["C:/Code/SEProject/vue/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\nlet baseURL;\r\n\r\n\r\n// 检查是否存在非标准端口\r\nconst origin = window.location.origin;\r\nif (origin.includes(':')) {\r\n    // 包含非标准端口\r\n    baseURL = origin.replace(/(:\\d+)+$/, '') + ':5050';\r\n} else {\r\n    baseURL = origin + ':5050';\r\n}\r\nconsole.log('baseURL:', baseURL);\r\n// 创建可一个新的axios对象\r\nconst request = axios.create({\r\n    // baseURL: 'http://localhost:5050',   // 后端的接口地址  ip:port\r\n    baseURL: baseURL,   // 后端的接口地址  ip:port\r\n    timeout: 100000,\r\n    withCredentials: true  // this will include cookies in requests\r\n})\r\n\r\n// request 拦截器\r\n// 可以自请求发送前对请求做一些处理\r\n// 比如统一加token，对请求参数统一加密\r\nrequest.interceptors.request.use(config => {\r\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\r\n    // let user = localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : null\r\n    // config.headers['token'] = 'token'  // 设置请求头\r\n\r\n    return config\r\n}, error => {\r\n    console.error('request error: ' + error) // for debug\r\n    return Promise.reject(error)\r\n});\r\n\r\n// response 拦截器\r\n// 可以在接口响应后统一处理结果\r\nrequest.interceptors.response.use(\r\n    response => {\r\n        let res = response;\r\n        // res.status = response.status;\r\n\r\n        // 兼容服务端返回的字符串数据\r\n        if (typeof res === 'string') {\r\n            res = res ? JSON.parse(res) : res\r\n        }\r\n        return res;\r\n    },\r\n    error => {\r\n        console.error('response error: ' + error) // for debug\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n\r\nexport default request"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,IAAIC,OAAO;;AAGX;AACA,MAAMC,MAAM,GAAGC,MAAM,CAACC,QAAQ,CAACF,MAAM;AACrC,IAAIA,MAAM,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAE;EACtB;EACAJ,OAAO,GAAGC,MAAM,CAACI,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,GAAG,OAAO;AACtD,CAAC,MAAM;EACHL,OAAO,GAAGC,MAAM,GAAG,OAAO;AAC9B;AACAK,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEP,OAAO,CAAC;AAChC;AACA,MAAMQ,OAAO,GAAGT,KAAK,CAACU,MAAM,CAAC;EACzB;EACAT,OAAO,EAAEA,OAAO;EAAI;EACpBU,OAAO,EAAE,MAAM;EACfC,eAAe,EAAE,IAAI,CAAE;AAC3B,CAAC,CAAC;;AAEF;AACA;AACA;AACAH,OAAO,CAACI,YAAY,CAACJ,OAAO,CAACK,GAAG,CAACC,MAAM,IAAI;EACvCA,MAAM,CAACC,OAAO,CAAC,cAAc,CAAC,GAAG,gCAAgC;EACjE;EACA;;EAEA,OAAOD,MAAM;AACjB,CAAC,EAAEE,KAAK,IAAI;EACRV,OAAO,CAACU,KAAK,CAAC,iBAAiB,GAAGA,KAAK,CAAC,EAAC;EACzC,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CAAC;;AAEF;AACA;AACAR,OAAO,CAACI,YAAY,CAACO,QAAQ,CAACN,GAAG,CAC7BM,QAAQ,IAAI;EACR,IAAIC,GAAG,GAAGD,QAAQ;EAClB;;EAEA;EACA,IAAI,OAAOC,GAAG,KAAK,QAAQ,EAAE;IACzBA,GAAG,GAAGA,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACF,GAAG,CAAC,GAAGA,GAAG;EACrC;EACA,OAAOA,GAAG;AACd,CAAC,EACDJ,KAAK,IAAI;EACLV,OAAO,CAACU,KAAK,CAAC,kBAAkB,GAAGA,KAAK,CAAC,EAAC;EAC1C,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAGD,eAAeR,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}